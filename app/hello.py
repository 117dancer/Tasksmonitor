# -*- coding: utf-8 -*- # __author__='fanweiming'# __time__ ='2018/4/13 23:01'import osimport sqlite3# bootstrap = Bootstrap(app)import sysfrom flask import Flaskfrom flask import render_template, session, redirect, url_for, request, jsonifyfrom flask.ext.wtf import Formfrom flask_bootstrap import Bootstrapfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import Requiredfrom config import Configfrom dataBase import MyDataBase, insert1from gansu import start_rtsp, log_dir, delete_allfrom log import log1sys.path.append("..")app = Flask(__name__)bootstrap = Bootstrap(app)log = log1()# SEND_TASK_NUMBER = 5# TOTAL_AVAILABLE = 5# SUCCESS = 5# FAILURE = 5class taskForm(Form):    task = StringField("please input numbers of vedio you want to send", validators=[Required()])    submit = SubmitField(u"submit")@app.route("/", methods=["POST", "GET"])def first_test():    list_new = get_all_list()    form1 = taskForm()    if form1.validate_on_submit():        session["task"] = form1.task.data        log.info("the user have get the number from the form he want to send to sensetime %s" % session["task"])        print session.get("task")        (total, success, failure) = start_rtsp(int(session.get("task")), log_dir)        data_base = MyDataBase(Config.DATA_BASE_NAME, Config.DATA_BASE_TABLE_NAME)        data_base.create_table()        insert1(total=total, success=success, fail=failure)        log.info("insert into table %s %d,%d,%d" % (Config.DATA_BASE_TABLE_NAME,total, success, failure))        print "total is %d" % total + "success is %d" % success + "fail is %d" % failure        return redirect(url_for("first_test"))    return render_template("taskStart.html", myList=list_new, form=form1)@app.route("/taskStatic")def show_task():    return render_template("viewData.html")@app.route("/sendTask", methods=["POST"])def get_task_sta():    cc = sqlite3.connect("task")    try:        cs = cc.cursor()        cs.execute(r"select total,success,fail from %s order by Id desc"%Config.DATA_BASE_TABLE_NAME)        first_row = cs.fetchone()        data = list(first_row)        log.info("from database to fetch data-->%d,%d,%d" %(data[0], data[1], data[2]))        print data    except Exception:        data = [20, 10, 10]        log.error("connect to database error!")    finally:        cc.close()    xaxis = ["total", "success", "fail"]    return jsonify(data1=data, categories=xaxis)@app.route("/kill", methods=["POST", "GET"])def kill_task():    if request.method == "POST":        delete_all()        log.info("kill the all the tasks in sensetime")        return redirect(url_for("first_test"))    else:        return render_template("error.html")def get_pid(element):    # import os    try:        if element == "hadoop":            element = "namenode"        out = os.popen(r"jps | grep -i %s | awk '{print $1}'" % element).readlines()[0].rstrip("\n")    except Exception:        out=""        log.error("can not get the pid informatioin---->%s"%element)    return outdef get_status(string1):    if string1:        return "alive"    else:        return "dead"def get_info_list():    component_list = ["spark", "kafka", "elasticsearch", "hadoop"]    my_list = []    for i in component_list:        a = dict()        a["Name"] = i        a["Status"] = get_status(get_pid(i))        a["Pid"] = get_pid(i)        my_list.append(a)    return my_listdef across_node_component():    ano_list = []    try:        redis_out = os.popen(r"ssh %s ps -ef | grep redis | awk '{print $2}'"%Config.BIG_DATA_PREFIX+Config.REDIS_NODE) \            .readlines()[0].rstrip("\n")    except:        redis_out = ""        log.error("can not get the information of redis")    try:        logstash_out = os.popen(r"ssh %s ps -ef | grep logstash | awk '{print $2}'"%Config.BIG_DATA_PREFIX+Config.LOGSTASH_NODE) \            .readlines()[0].rstrip("\n")    except Exception:        logstash_out = ""        log.error("can not get the pid information of logstash")    redis_map = dict()    redis_map["Name"] = "redis"    redis_map["Pid"] = redis_out    redis_map["Status"] = get_status(redis_out)    logstash_map = dict()    logstash_map["Name"] = "logstash"    logstash_map["Status"] = get_status(logstash_out)    logstash_map["Pid"] = logstash_out    ano_list.append(redis_map)    ano_list.append(logstash_map)    return ano_listdef get_all_list():    list1 = get_info_list()    list2 = across_node_component()    list1.extend(list2)    return list1if __name__ == '__main__':    app.debug = False    app.config['SECRET_KEY'] = Config.SECRET_KEY    app.run(host=Config.HOST)